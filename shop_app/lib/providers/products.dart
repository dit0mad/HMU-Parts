import 'package:flutter/material.dart';
import 'package:flutter_complete_guide/models/http_except.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

import './product.dart';

class Products with ChangeNotifier {
  List<Product> _items = [];

  String authToken;
  String userId;

  Products(this.authToken, this.userId,this._items);

  List<Product> get items {
    // if (_showFavoritesOnly) {
    //   return _items.where((prodItem) => prodItem.isFavorite).toList();
    // }
    return [..._items];
  }

  List<Product> get favoriteItems {
    return _items.where((prodItem) => prodItem.isFavorite).toList();
  }

  Product findById(String id) {
    return _items.firstWhere((prod) => prod.id == id);
  }

  Future<void> getAndSetProduct([bool filterByUser = false]) async {

    final orderBy = filterByUser ? '"&orderBy="creatorId"&equalTo="$userId"' : '';
    
    try {
      var url =
          'https://buyandsell-21965.firebaseio.com/products.json?auth=$authToken&$orderBy';
      final response = await http.get(url);
      final extractedBody = json.decode(response.body) as Map<String, dynamic>;

      //save products as objects here from json format
      final List<Product> decodedProd = [];

      if (extractedBody == null) {
        return;
      }

      url = 'https://buyandsell-21965.firebaseio.com/products/userFavorites/$userId.json?auth=$authToken';
      final favResponse = await http.get(url);
      final favData = json.decode(favResponse.body);
      

      extractedBody.forEach((prodId, prodData) {
        //holds list of products
        decodedProd.add(Product(
          id: prodId,
          title: prodData['title'],
          description: prodData['description'],
          price: prodData['price'],
          isFavorite: favData==null ? false : favData[prodId] ?? false,
          imageUrl: prodData['imageURL'],
        ));

        //
        _items = decodedProd;
        //notify any widget if they are depending on _items list
        notifyListeners();
      });
    } catch (error) {
      print('Error in getting products');
    }
  }

    //uploads new items to database
    //parses incoming requests to json
  Future<void> addProduct(Product product) async {
    
    final url =
        'https://buyandsell-21965.firebaseio.com/products.json?auth=$authToken';

    try {
      final response = await http.post(
        url,
        body: json.encode({
          'title': product.title,
          'description': product.description,
          'imageUrl': product.imageUrl,
          'price': product.price,
          'creatorId': userId,
        }),
      );
      //User posting a product to database
      final newProduct = Product(
        title: product.title,
        description: product.description,
        price: product.price,
        imageUrl: product.imageUrl,
        //decoding autogenerated id from firebase
        id: json.decode(response.body)['name'],
      );

      _items.add(newProduct);

      // _items.insert(0, newProduct); // at the start of the list
      notifyListeners();
    } catch (error) {
      throw error;
    }
  }

  void updateProduct(String id, Product newProduct) async {
    final prodIndex = _items.indexWhere((prod) => prod.id == id);
    if (prodIndex >= 0) {
      //final in runtime
      final updateUrl =
          'https://buyandsell-21965.firebaseio.com/products/$id.json?auth=$authToken';

      //http.patch automatically update incoming data with data in server.
      try {
        await http.patch(updateUrl,
            body: jsonEncode({
              'title': newProduct.title,
              'decription': newProduct.description,
              'imageUrl': newProduct.imageUrl,
              'price': newProduct.price,
            }));

        //updating in local memory
        _items[prodIndex] = newProduct;
        notifyListeners();
      } catch (error) {
        print(error);
      }
    } else {
      print('...');
    }
  }

//optimistic deleting
  Future<void> deleteProduct(String id) async {
    final url =
        'https://buyandsell-21965.firebaseio.com/products/$id.json?auth=$authToken';

    //look for the index in  list of products(prod) where that id is equal to String id.
    final productIndex = _items.indexWhere((prod) => prod.id == id);
    // saves the product thats being deleted.
    var existingProduct = _items[productIndex];
    _items.removeAt(productIndex);
    notifyListeners();

    final response = await http.delete(url);

// if deleting product failed, it will be reinserted to the list
    if (response.statusCode >= 400) {
      _items.insert(productIndex, existingProduct);

      notifyListeners();
      throw HttpException('Could not delete product');
    }
    existingProduct = null;
  }
}
